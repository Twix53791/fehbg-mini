#!/bin/bash
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# MADE BY twix (https://github.com/Twix53791)
#
# A small command line interface to manage wallpapers.
#
# DEPENDENCIES:
#		fzf			(https://github.com/junegunn/fzf)
#		feh			(https://github.com/derf/feh)
#     timg        (https://github.com/hzeller/timg)
#     libnotify   (for desktop notifications)
# Optionnal:
#		fd				(https://github.com/sharkdp/fd)
#
# Note: timg can be replaced by almost any terminal image viewer.
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

### CONFIG ###

# Directory where to search for wallpapers
WP_DIR=$HOME/.config/bspwm/wallpapers

# It is possible to pass options to fzf with FZF_OPTIONS:
#FZF_OPTIONS=(--color='bg:237,bg+:236,info:143,border:240,spinner:108' \
#					--margin 2% --padding 2% \
#					--bind 'ctrl-a:select-all+accept')

### FUNCTIONS ###

_chk_wp_dir (){
   [[ ${WP_DIR: -1} != "/" ]] && WP_DIR="${WP_DIR}/"

   if [[ ! -d $WP_DIR ]]; then
      notify-send "fehbg-mini error" "Wallpapers directory not found."
      exit
   else
      [[ $1 == "-R" ]] && rm -r "${WP_DIR}/:options"
      [[ ! -d "${WP_DIR}/:options" ]] && mkdir "${WP_DIR}/:options"
      [[ ! -f "${WP_DIR}/:options/-- set a permanent wallpaper" ]] &&
              touch "${WP_DIR}/:options/-- set a permanent wallpaper"
      [[ ! -f "${WP_DIR}/:options/-- set random boot wallpapers" ]] &&
              touch "${WP_DIR}/:options//-- set random boot wallpapers"
      [[ ! -f "${WP_DIR}/:options/-- hide wallpapers" ]] &&
              touch "${WP_DIR}/:options/-- hide wallpapers"
      [[ ! -f "${WP_DIR}/:options/-- explore home directory" ]] &&
              touch "${WP_DIR}/:options/-- explore home directory"
   fi
}

_main_menu (){

   # Set the directory in which fd/find searches
      if [[ $1 == options ]]; then
         DIR=${WP_DIR}:options/
      elif [[ $1 == fromdir ]]; then
         DIR="$2"
      else
         DIR=$WP_DIR
      fi

	# Use `fd` if present, to have a beautiful colourful output
	#  If not, use `find`
		if command -v fd &>/dev/null; then
		   _find=0
			cmd1=(fd -E '_*' -d 1 --path-separator '' \
					--color=always --base-directory "$DIR")
			cmd2=(fd --glob '_*' -d 1 \
					--color=always --base-directory "$DIR")
			cmd3=(fd -t f -E '_*' -d 1 \
			      --color=always --base-directory "$DIR")
			cmd4=(fd -t d \
					--color=always --base-directory "$HOME")
		else
		   _find=1
			cmd1=(find "$DIR" -maxdepth 1 -mindepth 1 \( \
					! -iname '_*' ! -iname '.*' \) \
					-printf '%f\n')
			cmd2=(find "$DIR" -maxdepth 1 -mindepth 1 \( \
					-iname '_*' \) \
					-printf '%f\n')
			cmd3=(find "$DIR" -type f -maxdepth 1 -mindepth 1 \( \
					! -iname '_*' ! -iname '.*' \) \
					-printf '%f\n')
			cmd4=(find "$HOME" -type d -mindepth 1)
		fi

	# Menus specific commands
  		if [[ $1 == hide ]]; then
  		   mselect=(-m)
		elif [[ $1 == perm ]]; then
		   cmd1=("${cmd3[@]}") && cmd2=()
		elif [[ $1 == home ]]; then
		   cmd1=("${cmd4[@]}") && cmd2=()
      elif command -v fd &>/dev/null; then
         cmd2=()
      fi

	# Fzf menu
	   if [[ $_find == 0 ]]; then
	         output=$(cat <( "${cmd1[@]}" 2>/dev/null && "${cmd2[@]}" 2>/dev/null) |
            fzf --ansi \
            --preview "timg -g70x30 -p h ${DIR}/{} 2>/dev/null" \
            --preview-window '60%:noborder' \
            "${mselect[@]}" \
            "${FZF_OPTIONS[@]}")
      else
         output=$(cat <( "${cmd1[@]}" 2>/dev/null && "${cmd2[@]}" 2>/dev/null) |
         sort -f |
         fzf --ansi \
         --preview "timg -g70x30 -p h ${DIR}{} 2>/dev/null" \
         --preview-window '60%:noborder' \
         "${mselect[@]}" \
         "${FZF_OPTIONS[@]}")
      fi

	mselect=()

	if [[ -z $output && -z $1 ]]; then
		exit
	else
		_action
	fi
}

_action (){
	if [[ $output == *"options"* ]]; then
      _show_options
	elif [[ $output == *"-- set a perm"* ]]; then
		_set_permanent_wallpaper
	elif [[ $output == *"-- set random"* ]]; then
		_set_random_wallpapers
	elif [[ $output == *"-- hide"* ]]; then
		_hide_wallpapers
	elif [[ $output == *"-- explore"* ]]; then
		_explore_home
	else
		file="$DIR$output"
		[[ -f "$file" ]] &&
			_set_wallpaper "$file"
	fi
}

_show_options (){
   _main_menu options
}

_set_wallpaper (){
   feh --no-fehbg --bg-scale "$1"
}

_set_permanent_wallpaper (){
	_main_menu perm

	if [[ -n $output ]]; then
		echo "$WP_DIR$output" > "${WP_DIR}.permanent_wallpaper"
   else
		notify-send "No file selected" "Operation Cancelled"
   fi

	_main_menu
}

_set_random_wallpapers (){
	echo '' > "${WP_DIR}.permanent_wallpaper"
	notify-send "Boot randomization actived"

	_main_menu
}

_hide_wallpapers (){
	_main_menu hide

	# Transform output unto an array
	mapfile -t output < <( echo "$output")

	if [[ -n $output ]]; then
		for file in "${output[@]}"; do
         if [[ ${file:0:1} == "_" ]]; then
   			mv "$WP_DIR$file" "$WP_DIR${file:1}"
         else
   			mv "$WP_DIR$file" "${WP_DIR}_$file"
         fi
		done
	fi

	_main_menu
}

_explore_home (){
	_main_menu home

   if [[ -n $output ]]; then
      if [[ $_find == 0 ]]; then
   	   _main_menu fromdir "${HOME}/$output/"
	   else
   	   _main_menu fromdir "$output/"
	   fi
	else
	   _main_menu
	fi
}

### SCRIPT ###

_chk_wp_dir "$1"
_main_menu
